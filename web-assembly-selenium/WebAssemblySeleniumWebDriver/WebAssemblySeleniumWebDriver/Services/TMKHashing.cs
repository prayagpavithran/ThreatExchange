using System.Security.Cryptography;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using WebAssemblySeleniumWebDriver.Utils;

namespace WebAssemblySeleniumWebDriver.Services {
    public class TMKHashing {
        /// <summary>
        /// This method is used for passing the filenames whose TMK hash needs to be generated by reading the information from the CSV file.
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="csvFilePath"></param>
        /// <param name="siteUrl"></param>
        /// <param name="downloadFilePath"></param>
        public static void GetHash(IWebDriver driver,string csvFilePath,string siteUrl,string downloadFilePath) {

            if (String.IsNullOrWhiteSpace(csvFilePath) || String.IsNullOrWhiteSpace(siteUrl)) {
                Console.WriteLine("Some of the required parameters of GetHash method are missing");
                return;
            }

            try {
                driver.Navigate().GoToUrl(siteUrl);

                WebDriverWait w = new WebDriverWait(driver,TimeSpan.FromSeconds(20));
                w.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.ElementIsVisible(By.CssSelector("div.page-center a.upload:not(.disabled)")));

                // Verify if a proper csv filepath which contains the file with hash information is passed.
                if (!File.Exists(csvFilePath)) {
                    Console.WriteLine($"{csvFilePath} path doesn't exist in the system. Please pass in a valid csv file path.");
                    return;
                }

                StreamReader reader = new StreamReader(csvFilePath);
                string line = String.Empty;
                string[] columns = new string[2];
                String filePath = String.Empty;
                String tmkFilePath = String.Empty;
                reader.ReadLine(); // skip first

                int csvFileLineCount = 0;

                while ((line = reader.ReadLine()) != null) {
                    columns = line.Split(',');
                    csvFileLineCount++;

                    if (columns.Length < 2) {
                        Console.WriteLine($"Please verify all the required details are entered for item no {csvFileLineCount} in {csvFilePath}.");
                        continue;
                    }

                    filePath = columns[0];
                    tmkFilePath = columns[1];

                    if (!File.Exists(filePath)) {
                        Console.WriteLine($"{filePath} filepath doesn't exists in the system.Please specify a valid file path in the csv file.");
                        continue;
                    }

                    var element = driver.FindElement(By.Id("myfile"));
                    element.SendKeys(filePath);


                    string fileName = Path.GetFileName(filePath);

                    var tmkfilename = $"{fileName.Substring(0,fileName.LastIndexOf("."))}.tmk";

                    var currentfileDownloadLink = driver.FindElements(By.CssSelector($"a[download='{tmkfilename}']"));

                    while (currentfileDownloadLink.Count < 1) {
                        currentfileDownloadLink = driver.FindElements(By.CssSelector($"a[download='{tmkfilename}']"));
                    }

                    Console.WriteLine($"{Path.GetFileName(filePath)} is downloaded.");

                    String generatedTMKFileMD5 = String.Empty;
                    String actualTMKFileMD5 = String.Empty;

                    int count = 0;

                    // Loop through until the file exists in the downloaded path. This looping should occur only for a finite number of times.
                    while (!File.Exists($"{downloadFilePath}/{tmkfilename}") && count<5000) {
                        count++;
                    };

                    // If still could not find the tmkfile in the downloaded path , seems like some error occured while hash generation. No need to 
                    // proceed further from here.
                    if (!File.Exists($"{downloadFilePath}/{tmkfilename}")){
                        Console.WriteLine($"Looks like some error occurred during {fileName} TMK hash generation.");
                        continue;
                    }
           
                    // Check if both Generated and Actual TMK file hashes are same . If so print a message else print error message.
                    if (FileUtils.FileCompare(tmkFilePath,$"{downloadFilePath}/{tmkfilename}")) {
                        Console.WriteLine($"Generated TMK file contents for {fileName} is matching with the actual TMK file contents.");
                    }
                    else {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"Generated TMK file contents for {fileName} is not matching with the actual TMK file contents.");
                        Console.ResetColor();
                    }
                }

            }
            catch (Exception ex) {
                Console.WriteLine($"Error in GetHash method. Error Message - {ex.Message} , csvFilePath - {csvFilePath}, siteUrl - {siteUrl}");
            }
        }
    }
}
